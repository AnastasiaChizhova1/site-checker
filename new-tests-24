<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(to bottom, #1e1e2f, #4a90e2);
            color: white;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            font-family: Arial, sans-serif;
            position: relative;
            overflow-x: hidden;
            text-align: center;
            padding: 20px;
        }

        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 1px, transparent 1px);
            background-size: 50px 50px;
            animation: starTwinkle 10s infinite linear;
            z-index: -1;
        }

        @keyframes starTwinkle {
            0% { background-position: 0 0; }
            100% { background-position: 100px 100px; }
        }

        .form-control, .btn {
            max-width: 500px;
            margin: 10px auto;
        }

        .result {
            margin-top: 20px;
            font-size: 0.9rem;
            max-height: 400px;
            overflow-y: auto;
            background: rgba(0, 0, 0, 0.5);
            padding: 10px;
            border-radius: 10px;
            line-height: 1.2;
            text-align: left;
            max-width: 500px;
            margin-left: auto;
            margin-right: auto;
        }

        .progress {
            margin-top: 20px;
            max-width: 500px;
            margin-left: auto;
            margin-right: auto;
        }

        .language-selector {
            max-width: 200px;
            margin: 10px auto;
        }

        footer {
            background: rgba(0, 0, 0, 0.5);
            padding: 10px;
            border-radius: 10px;
            margin-top: 20px;
            font-size: 0.9rem;
        }

        footer a {
            color: #4caf50;
            text-decoration: none;
        }

        footer a:hover {
            text-decoration: underline;
        }

        .explanation {
            font-size: 0.8rem;
            color: #b0b0b0;
            margin-top: 5px;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="mb-4" id="title">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞</h1>
        <select id="languageSelector" class="form-select language-selector" onchange="changeLanguage()">
            <option value="ru" selected>–†—É—Å—Å–∫–∏–π</option>
            <option value="en">English</option>
            <option value="uk">–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞</option>
        </select>
        <input type="text" id="urlInput" class="form-control" placeholder="–í–≤–µ–¥–∏—Ç–µ URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com)">
        <button onclick="checkSite()" class="btn btn-light" id="checkButton">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
        <div class="progress" id="progressBar" style="display: none;">
            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%;" id="progressFill">0%</div>
        </div>
        <div id="result" class="result"></div>
    </div>

    <footer>
        <p>¬© 2025 | Created by Anastasia Chizhova</p>
        <p>
            Email: <a href="mailto:anastasiiachizhova98@gmail.com">anastasiiachizhova98@gmail.com</a> | 
            Telegram: <a href="https://t.me/chizhik15">@chizhik15</a> | 
            LinkedIn: <a href="https://www.linkedin.com/in/anastasia-chizhova-7055b1143">anastasia-chizhova</a>
        </p>
    </footer>

    <script>
        const translations = {
            ru: {
                title: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞",
                placeholder: "–í–≤–µ–¥–∏—Ç–µ URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com)",
                checkButton: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
                noUrl: "‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ URL",
                invalidUrl: "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL",
                checking: "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞...",
                tests: {
                    accessibility: "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å",
                    https: "HTTPS",
                    loadTime: "–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏",
                    urlFormat: "–§–æ—Ä–º–∞—Ç URL",
                    urlLength: "–î–ª–∏–Ω–∞ URL",
                    redirects: "–†–µ–¥–∏—Ä–µ–∫—Ç—ã",
                    protocol: "–ù–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞",
                    topLevelDomain: "–î–æ–º–µ–Ω –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è",
                    subdomains: "–ü–æ–¥–¥–æ–º–µ–Ω—ã",
                    cyrillic: "–ö–∏—Ä–∏–ª–ª–∏—Ü–∞ –≤ URL",
                    parameters: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL",
                    slashes: "–°–ª–µ—à–∏ –≤ –ø—É—Ç–∏",
                    uppercase: "–ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã",
                    keywords: "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",
                    ipAddress: "IPv4/IPv6",
                    port: "–ü–æ—Ä—Ç –≤ URL",
                    encoding: "–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤",
                    hyphens: "–î–µ—Ñ–∏—Å—ã –≤ URL",
                    anchor: "–Ø–∫–æ—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏",
                    suspicious: "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã",
                    w3c: "–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã W3C",
                    httpStatus: "–°—Ç–∞—Ç—É—Å HTTP-–∑–∞–ø—Ä–æ—Å–∞",
                    metaTags: "–ú–µ—Ç–∞-—Ç–µ–≥–∏",
                    iotCompatibility: "IoT-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"
                },
                explanations: {
                    accessibility: "–ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç. –ï—Å–ª–∏ –æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç, –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏ –ª—é–¥–∏ –º–æ–≥—É—Ç –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—å.",
                    https: "–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—â–∏—â—ë–Ω –ª–∏ —Å–∞–π—Ç. HTTPS ‚Äî —ç—Ç–æ –∫–∞–∫ –∑–∞–º–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—â–∏—â–∞–µ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—Ä–æ–ª–∏) –æ—Ç –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤.",
                    loadTime: "–ò–∑–º–µ—Ä—è–µ–º, –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–∞–π—Ç. –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∂–Ω–∞, —á—Ç–æ–±—ã –ª—é–¥—è–º –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å.",
                    urlFormat: "–ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞. –ï—Å–ª–∏ –æ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –±—Ä–∞—É–∑–µ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.",
                    urlLength: "–°–º–æ—Ç—Ä–∏–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å. –î–ª–∏–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ—É–¥–æ–±–Ω—ã –∏ –º–æ–≥—É—Ç –ø–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Google.",
                    redirects: "–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª–∏ —Å–∞–π—Ç –Ω–∞ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å. –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–∞–∫–∏—Ö –ø–µ—Ä–µ–±—Ä–æ—Å–æ–≤ –º–æ–∂–µ—Ç –∑–∞–ø—É—Ç–∞—Ç—å –∏ –∑–∞–º–µ–¥–ª–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.",
                    protocol: "–°–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤ –Ω–∞—á–∞–ª–µ –∞–¥—Ä–µ—Å–∞ 'http://' –∏–ª–∏ 'https://'. –ë–µ–∑ —ç—Ç–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç.",
                    topLevelDomain: "–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–∞–π—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π '—Ö–≤–æ—Å—Ç–∏–∫', –Ω–∞–ø—Ä–∏–º–µ—Ä, '.ru' –∏–ª–∏ '.com'. –ë–µ–∑ –Ω–µ–≥–æ –∞–¥—Ä–µ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º.",
                    subdomains: "–°–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É —Å–∞–π—Ç–∞ –ø–æ–¥–¥–æ–º–µ–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'spb' –≤ 'spb.h.ru'. –û–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å–∞–π—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.",
                    cyrillic: "–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∞–¥—Ä–µ—Å–µ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã. –û–Ω–∏ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö –∏–ª–∏ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏.",
                    parameters: "–°–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤ –∞–¥—Ä–µ—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '?category=news'). –û–Ω–∏ –Ω—É–∂–Ω—ã, —á—Ç–æ–±—ã —Å–∞–π—Ç –ø–æ–∫–∞–∑—ã–≤–∞–ª —Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
                    slashes: "–°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ '—Å–ª–µ—à–µ–π' ('/') –≤ –∞–¥—Ä–µ—Å–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, '/blog/post'. –ï—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –∞–¥—Ä–µ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω—ã–º.",
                    uppercase: "–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∞–¥—Ä–µ—Å–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã. –õ—É—á—à–µ –∏—Ö –∏–∑–±–µ–≥–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Ç–∞—Ç—å –ª—é–¥–µ–π.",
                    keywords: "–ò—â–µ–º –≤ –∞–¥—Ä–µ—Å–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç, –æ —á—ë–º —Å–∞–π—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'blog'). –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞–º, —Ç–∞–∫–∏–º –∫–∞–∫ Google.",
                    ipAddress: "–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ–≤–æ–π –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '192.168.0.1') –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ. –≠—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ –¥–ª—è —Å–∞–π—Ç–æ–≤.",
                    port: "–°–º–æ—Ç—Ä–∏–º, —É–∫–∞–∑–∞–Ω –ª–∏ –ø–æ—Ä—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, ':8080'. –û–±—ã—á–Ω–æ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π.",
                    encoding: "–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∞–¥—Ä–µ—Å–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, '%20' (–ø—Ä–æ–±–µ–ª). –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ –ª—É—á—à–µ, —á—Ç–æ–±—ã –∞–¥—Ä–µ—Å –±—ã–ª –ø—Ä–æ—Å—Ç—ã–º.",
                    hyphens: "–°—á–∏—Ç–∞–µ–º –¥–µ—Ñ–∏—Å—ã ('-') –≤ –∞–¥—Ä–µ—Å–µ. –ò—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –∏–Ω–∞—á–µ –∞–¥—Ä–µ—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ.",
                    anchor: "–°–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤ –∞–¥—Ä–µ—Å–µ '—è–∫–æ—Ä—å' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '#intro'). –û–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, —á—Ç–æ —É–¥–æ–±–Ω–æ.",
                    suspicious: "–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –≤ –∞–¥—Ä–µ—Å–µ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, '<' –∏–ª–∏ '>'. –û–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ö–∞–∫–µ—Ä–∞–º–∏.",
                    w3c: "–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥—Ä–µ—Å –ø—Ä–∞–≤–∏–ª–∞–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ (W3C). –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ –Ω—ë–º –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.",
                    httpStatus: "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 200 OK –∏–ª–∏ 404 Not Found). –≠—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–∞–π—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                    metaTags: "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (title, description). –û–Ω–∏ –≤–∞–∂–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ Google.",
                    iotCompatibility: "–ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Å–∞–π—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å IoT-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ —á–µ—Ä–µ–∑ API –∏–ª–∏ WebSocket. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π."
                },
                messages: {
                    accessible: "–î–æ—Å—Ç—É–ø–µ–Ω",
                    notAccessible: "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    httpsUsed: "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS",
                    httpUsed: "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTTP",
                    loadTime: (time) => `${time}—Å ${time < 2 ? "(–±—ã—Å—Ç—Ä–æ)" : "(–º–µ–¥–ª–µ–Ω–Ω–æ)"}`,
                    loadTimeFailed: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å",
                    urlValid: "–ö–æ—Ä—Ä–µ–∫—Ç–µ–Ω",
                    urlInvalid: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω",
                    urlLength: (len) => `${len} —Å–∏–º–≤. ${len <= 200 ? "(–û–ö)" : "(–¥–ª–∏–Ω–Ω—ã–π)"}`,
                    noRedirects: "–ù–µ—Ç",
                    hasRedirects: (status) => `–ï—Å—Ç—å (${status})`,
                    redirectsFailed: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å",
                    protocolPresent: "–ï—Å—Ç—å",
                    protocolMissing: "–ù–µ—Ç",
                    tldValid: "–ö–æ—Ä—Ä–µ–∫—Ç–µ–Ω",
                    tldInvalid: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω",
                    subdomainsPresent: "–ï—Å—Ç—å",
                    subdomainsMissing: "–ù–µ—Ç",
                    cyrillicPresent: "–ï—Å—Ç—å",
                    cyrillicMissing: "–ù–µ—Ç",
                    paramsPresent: "–ï—Å—Ç—å",
                    paramsMissing: "–ù–µ—Ç",
                    slashes: (count) => `–°–ª–µ—à–µ–π: ${count} ${count <= 5 ? "(–û–ö)" : "(–º–Ω–æ–≥–æ)"}`,
                    uppercasePresent: "–ï—Å—Ç—å",
                    uppercaseMissing: "–ù–µ—Ç",
                    keywordsPresent: "–ï—Å—Ç—å",
                    keywordsMissing: "–ù–µ—Ç",
                    ipPresent: "–ï—Å—Ç—å",
                    ipMissing: "–ù–µ—Ç",
                    portPresent: "–ï—Å—Ç—å",
                    portMissing: "–ù–µ—Ç",
                    encodingPresent: "–ï—Å—Ç—å",
                    encodingMissing: "–ù–µ—Ç",
                    hyphens: (count) => `–î–µ—Ñ–∏—Å–æ–≤: ${count} ${count <= 3 ? "(–û–ö)" : "(–º–Ω–æ–≥–æ)"}`,
                    anchorPresent: "–ï—Å—Ç—å",
                    anchorMissing: "–ù–µ—Ç",
                    suspiciousPresent: "–ï—Å—Ç—å",
                    suspiciousMissing: "–ù–µ—Ç",
                    w3cCompliant: "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç",
                    w3cNonCompliant: "–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç",
                    httpStatus: (code) => `–ö–æ–¥: ${code} ${code === 200 ? "(OK)" : "(–æ—à–∏–±–∫–∞)"}`,
                    httpStatusFailed: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å",
                    metaTagsPresent: "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    metaTagsMissing: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    iotSupported: "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
                    iotNotSupported: "–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
                },
                success: "‚úÖ –£—Å–ø–µ—à–Ω–æ",
                error: "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã"
            },
            en: {
                title: "Website Check",
                placeholder: "Enter URL (e.g., https://example.com)",
                checkButton: "Check",
                noUrl: "‚ùóÔ∏è Please enter a URL",
                invalidUrl: "‚ùå Invalid URL format",
                checking: "üîÑ Checking...",
                tests: {
                    accessibility: "Accessibility",
                    https: "HTTPS",
                    loadTime: "Load Time",
                    urlFormat: "URL Format",
                    urlLength: "URL Length",
                    redirects: "Redirects",
                    protocol: "Protocol Presence",
                    topLevelDomain: "Top-Level Domain",
                    subdomains: "Subdomains",
                    cyrillic: "Cyrillic in URL",
                    parameters: "URL Parameters",
                    slashes: "Slashes in Path",
                    uppercase: "Uppercase Letters",
                    keywords: "Keywords in URL",
                    ipAddress: "IPv4/IPv6",
                    port: "Port in URL",
                    encoding: "Encoded Characters",
                    hyphens: "Hyphens in URL",
                    anchor: "Anchor Links",
                    suspicious: "Suspicious Characters",
                    w3c: "W3C Standards",
                    httpStatus: "HTTP Status",
                    metaTags: "Meta Tags",
                    iotCompatibility: "IoT Compatibility"
                },
                explanations: {
                    accessibility: "We check if the website is reachable. If it responds, it means it works and people can visit it.",
                    https: "We check if the site is secure. HTTPS is like a lock that keeps your data (like passwords) safe from hackers.",
                    loadTime: "We measure how fast the site loads. A fast site is important so people don‚Äôt have to wait too long.",
                    urlFormat: "We check if the site‚Äôs address is written correctly. If it‚Äôs wrong, the browser can‚Äôt open the page.",
                    urlLength: "We look at how long the address is. Long addresses can be inconvenient and may not work well in search engines like Google.",
                    redirects: "We check if the site redirects to another address. Too many redirects can confuse users and slow things down.",
                    protocol: "We check if the address starts with 'http://' or 'https://'. Without this, the browser might not know how to open the site.",
                    topLevelDomain: "We check if the site has a proper ending, like '.com' or '.ru'. Without it, the address might not work.",
                    subdomains: "We look for subdomains, like 'spb' in 'spb.h.ru'. They help organize the site, for example, for different cities.",
                    cyrillic: "We check if the address has Russian letters. They can cause issues in older browsers or when copying the link.",
                    parameters: "We look for extra parts in the address (like '?category=news'). They help the site show different information.",
                    slashes: "We count the 'slashes' ('/') in the address, like '/blog/post'. Too many can make the address complicated.",
                    uppercase: "We check for uppercase letters in the address. It‚Äôs better to avoid them to prevent confusion.",
                    keywords: "We look for words in the address that halo at the site‚Äôs content (like 'blog'). This helps search engines like Google.",
                    ipAddress: "We check if the address uses a number (like '192.168.0.1') instead of a name. This is unusual for regular sites.",
                    port: "We check if a port is specified, like ':8080'. Normally, it‚Äôs not needed because the default one is used.",
                    encoding: "We check for encoded characters in the address, like '%20' (a space). It‚Äôs okay, but simple addresses are better.",
                    hyphens: "We count hyphens ('-') in the address. Too many can make the address look odd.",
                    anchor: "We check for an 'anchor' (like '#intro') in the address. It points to a specific spot on the page, which is handy.",
                    suspicious: "We look for strange characters, like '<' or '>'. These can be dangerous and used by hackers.",
                    w3c: "We check if the address follows internet rules (W3C). For example, it shouldn‚Äôt have spaces or weird symbols.",
                    httpStatus: "Checks the server response code (e.g., 200 OK or 404 Not Found). This shows if the site works correctly.",
                    metaTags: "Checks the presence and quality of page headers (title, description). They are crucial for search engines like Google.",
                    iotCompatibility: "Checks if the site supports IoT device integration via API or WebSocket. This is important for modern web applications."
                },
                messages: {
                    accessible: "Accessible",
                    notAccessible: "Not accessible",
                    httpsUsed: "Uses HTTPS",
                    httpUsed: "Uses HTTP",
                    loadTime: (time) => `${time}s ${time < 2 ? "(fast)" : "(slow)"}`,
                    loadTimeFailed: "Failed to measure",
                    urlValid: "Valid",
                    urlInvalid: "Invalid",
                    urlLength: (len) => `${len} chars ${len <= 200 ? "(OK)" : "(long)"}`,
                    noRedirects: "None",
                    hasRedirects: (status) => `Found (${status})`,
                    redirectsFailed: "Failed to check",
                    protocolPresent: "Present",
                    protocolMissing: "Missing",
                    tldValid: "Valid",
                    tldInvalid: "Invalid",
                    subdomainsPresent: "Present",
                    subdomainsMissing: "Missing",
                    cyrillicPresent: "Present",
                    cyrillicMissing: "Missing",
                    paramsPresent: "Present",
                    paramsMissing: "Missing",
                    slashes: (count) => `Slashes: ${count} ${count <= 5 ? "(OK)" : "(too many)"}`,
                    uppercasePresent: "Present",
                    uppercaseMissing: "Missing",
                    keywordsPresent: "Present",
                    keywordsMissing: "Missing",
                    ipPresent: "Present",
                    ipMissing: "Missing",
                    portPresent: "Present",
                    portMissing: "Missing",
                    encodingPresent: "Present",
                    encodingMissing: "Missing",
                    hyphens: (count) => `Hyphens: ${count} ${count <= 3 ? "(OK)" : "(too many)"}`,
                    anchorPresent: "Present",
                    anchorMissing: "Missing",
                    suspiciousPresent: "Present",
                    suspiciousMissing: "Missing",
                    w3cCompliant: "Compliant",
                    w3cNonCompliant: "Non-compliant",
                    httpStatus: (code) => `Code: ${code} ${code === 200 ? "(OK)" : "(error)"}`,
                    httpStatusFailed: "Failed to check",
                    metaTagsPresent: "Present",
                    metaTagsMissing: "Missing",
                    iotSupported: "Supported",
                    iotNotSupported: "Not supported"
                },
                success: "‚úÖ Success",
                error: "‚ö†Ô∏è Issues"
            },
            uk: {
                title: "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∞–π—Ç—É",
                placeholder: "–í–≤–µ–¥—ñ—Ç—å URL (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, https://example.com)",
                checkButton: "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏",
                noUrl: "‚ùóÔ∏è –í–≤–µ–¥—ñ—Ç—å URL",
                invalidUrl: "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç URL",
                checking: "üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞...",
                tests: {
                    accessibility: "–î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å",
                    https: "HTTPS",
                    loadTime: "–®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
                    urlFormat: "–§–æ—Ä–º–∞—Ç URL",
                    urlLength: "–î–æ–≤–∂–∏–Ω–∞ URL",
                    redirects: "–†–µ–¥–∏—Ä–µ–∫—Ç–∏",
                    protocol: "–ù–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª—É",
                    topLevelDomain: "–î–æ–º–µ–Ω –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è",
                    subdomains: "–ü—ñ–¥–¥–æ–º–µ–Ω–∏",
                    cyrillic: "–ö–∏—Ä–∏–ª–∏—Ü—è –≤ URL",
                    parameters: "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ URL",
                    slashes: "–°–ª–µ—à—ñ –≤ —à–ª—è—Ö—É",
                    uppercase: "–í–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏",
                    keywords: "–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞",
                    ipAddress: "IPv4/IPv6",
                    port: "–ü–æ—Ä—Ç –≤ URL",
                    encoding: "–ö–æ–¥—É–≤–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤",
                    hyphens: "–î–µ—Ñ—ñ—Å–∏ –≤ URL",
                    anchor: "–Ø–∫—ñ—Ä–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è",
                    suspicious: "–ü—ñ–¥–æ–∑—Ä—ñ–ª—ñ —Å–∏–º–≤–æ–ª–∏",
                    w3c: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏ W3C",
                    httpStatus: "–°—Ç–∞—Ç—É—Å HTTP-–∑–∞–ø–∏—Ç—É",
                    metaTags: "–ú–µ—Ç–∞-—Ç–µ–≥–∏",
                    iotCompatibility: "IoT-—Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å"
                },
                explanations: {
                    accessibility: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ –∑–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç. –Ø–∫—â–æ –≤—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î, –∑–Ω–∞—á–∏—Ç—å, –ø—Ä–∞—Ü—é—î, —ñ –ª—é–¥–∏ –º–æ–∂—É—Ç—å –π–æ–≥–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏.",
                    https: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞—Ö–∏—â–µ–Ω–∏–π —Å–∞–π—Ç. HTTPS ‚Äî —Ü–µ —è–∫ –∑–∞–º–æ–∫, —è–∫–∏–π –∑–∞—Ö–∏—â–∞—î —Ç–≤–æ—ó –¥–∞–Ω—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–∞—Ä–æ–ª—ñ) –≤—ñ–¥ –∑–ª–æ–≤–º–∏—Å–Ω–∏–∫—ñ–≤.",
                    loadTime: "–í–∏–º—ñ—Ä—é—î–º–æ, —è–∫ —à–≤–∏–¥–∫–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è —Å–∞–π—Ç. –®–≤–∏–¥–∫–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∞–∂–ª–∏–≤–µ, —â–æ–± –ª—é–¥—è–º –Ω–µ –¥–æ–≤–µ–ª–æ—Å—è –¥–æ–≤–≥–æ —á–µ–∫–∞—Ç–∏.",
                    urlFormat: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–∞ –∞–¥—Ä–µ—Å–∞ —Å–∞–π—Ç—É. –Ø–∫—â–æ –≤–æ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞, –±—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–º–æ–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.",
                    urlLength: "–î–∏–≤–∏–º–æ—Å—è, —á–∏ –Ω–µ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ –∞–¥—Ä–µ—Å–∞. –î–æ–≤–≥—ñ –∞–¥—Ä–µ—Å–∏ –Ω–µ–∑—Ä—É—á–Ω—ñ —ñ –º–æ–∂—É—Ç—å –ø–æ–≥–∞–Ω–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ –ø–æ—à—É–∫–æ–≤–∏–∫–∞—Ö, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —É Google.",
                    redirects: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–µ—Ä–µ–∫–∏–¥–∞—î —Å–∞–π—Ç –Ω–∞ —ñ–Ω—à—É –∞–¥—Ä–µ—Å—É. –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Ç–∞–∫–∏—Ö –ø–µ—Ä–µ–∫–∏–¥—ñ–≤ –º–æ–∂–µ –∑–∞–ø–ª—É—Ç–∞—Ç–∏ —ñ —Å–ø–æ–≤—ñ–ª—å–Ω–∏—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.",
                    protocol: "–î–∏–≤–∏–º–æ—Å—è, —á–∏ —î –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∞–¥—Ä–µ—Å–∏ 'http://' –∞–±–æ 'https://'. –ë–µ–∑ —Ü—å–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ –Ω–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —è–∫ –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Å–∞–π—Ç.",
                    topLevelDomain: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —É —Å–∞–π—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π '—Ö–≤–æ—Å—Ç–∏–∫', –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '.ru' –∞–±–æ '.com'. –ë–µ–∑ –Ω—å–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–¥—ñ–π—Å–Ω–æ—é.",
                    subdomains: "–î–∏–≤–∏–º–æ—Å—è, —á–∏ —î —É —Å–∞–π—Ç—É –ø—ñ–¥–¥–æ–º–µ–Ω–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'spb' —É 'spb.h.ru'. –í–æ–Ω–∏ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ —Å–∞–π—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º—ñ—Å—Ç.",
                    cyrillic: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤ –∞–¥—Ä–µ—Å—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∞–±–æ —Ä–æ—Å—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏. –í–æ–Ω–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –≤ —Å—Ç–∞—Ä–∏—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö –∞–±–æ –ø—Ä–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—ñ.",
                    parameters: "–î–∏–≤–∏–º–æ—Å—è, —á–∏ —î –≤ –∞–¥—Ä–µ—Å—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —á–∞—Å—Ç–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '?category=news'). –í–æ–Ω–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ, —â–æ–± —Å–∞–π—Ç –ø–æ–∫–∞–∑—É–≤–∞–≤ —Ä—ñ–∑–Ω—ñ –¥–∞–Ω—ñ.",
                    slashes: "–†–∞—Ö—É—î–º–æ, —Å–∫—ñ–ª—å–∫–∏ '—Å–ª–µ—à—ñ–≤' ('/') –≤ –∞–¥—Ä–µ—Å—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '/blog/post'. –Ø–∫—â–æ —ó—Ö –∑–∞–±–∞–≥–∞—Ç–æ, –∞–¥—Ä–µ—Å–∞ –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–ª–∞–¥–Ω–æ—é.",
                    uppercase: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤ –∞–¥—Ä–µ—Å—ñ –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏. –ö—Ä–∞—â–µ —ó—Ö —É–Ω–∏–∫–∞—Ç–∏, —â–æ–± –Ω–µ –∑–∞–ø–ª—É—Ç–∞—Ç–∏ –ª—é–¥–µ–π.",
                    keywords: "–®—É–∫–∞—î–º–æ –≤ –∞–¥—Ä–µ—Å—ñ —Å–ª–æ–≤–∞, —è–∫—ñ –ø—ñ–¥–∫–∞–∑—É—é—Ç—å, –ø—Ä–æ —â–æ —Å–∞–π—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'blog'). –¶–µ –¥–æ–ø–æ–º–∞–≥–∞—î –ø–æ—à—É–∫–æ–≤–∏–∫–∞–º, —Ç–∞–∫–∏–º —è–∫ Google.",
                    ipAddress: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —á–∏—Å–ª–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '192.168.0.1') –∑–∞–º—ñ—Å—Ç—å –∑–≤–∏—á–∞–π–Ω–æ—ó. –¶–µ –Ω–µ–∑–≤–∏—á–Ω–æ –¥–ª—è —Å–∞–π—Ç—ñ–≤.",
                    port: "–î–∏–≤–∏–º–æ—Å—è, —á–∏ –≤–∫–∞–∑–∞–Ω–æ –ø–æ—Ä—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ':8080'. –ó–∞–∑–≤–∏—á–∞–π –≤—ñ–Ω –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω, –±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π.",
                    encoding: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤ –∞–¥—Ä–µ—Å—ñ –∑–∞–∫–æ–¥–æ–≤–∞–Ω—ñ —Å–∏–º–≤–æ–ª–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '%20' (–ø—Ä–æ–±—ñ–ª). –¶–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∞–ª–µ –∫—Ä–∞—â–µ, —â–æ–± –∞–¥—Ä–µ—Å–∞ –±—É–ª–∞ –ø—Ä–æ—Å—Ç–æ—é.",
                    hyphens: "–†–∞—Ö—É—î–º–æ –¥–µ—Ñ—ñ—Å–∏ ('-') –≤ –∞–¥—Ä–µ—Å—ñ. –á—Ö –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –∑–∞–±–∞–≥–∞—Ç–æ, —ñ–Ω–∞–∫—à–µ –∞–¥—Ä–µ—Å–∞ –≤–∏–≥–ª—è–¥–∞—î –¥–∏–≤–Ω–æ.",
                    anchor: "–î–∏–≤–∏–º–æ—Å—è, —á–∏ —î –≤ –∞–¥—Ä–µ—Å—ñ '—è–∫—ñ—Ä' (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '#intro'). –í—ñ–Ω –≤–∫–∞–∑—É—î –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –º—ñ—Å—Ü–µ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ, —â–æ –∑—Ä—É—á–Ω–æ.",
                    suspicious: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ–º–∞—î –≤ –∞–¥—Ä–µ—Å—ñ –¥–∏–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '<' –∞–±–æ '>'. –í–æ–Ω–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–º–∏ —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è —Ö–∞–∫–µ—Ä–∞–º–∏.",
                    w3c: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∞–¥—Ä–µ—Å–∞ –ø—Ä–∞–≤–∏–ª–∞–º —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É (W3C). –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —É –Ω—ñ–π –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –ø—Ä–æ–±—ñ–ª—ñ–≤ –∞–±–æ –¥–∏–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤.",
                    httpStatus: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 200 OK –∞–±–æ 404 Not Found). –¶–µ –ø–æ–∫–∞–∑—É—î, —á–∏ –ø—Ä–∞—Ü—é—î —Å–∞–π—Ç –∫–æ—Ä–µ–∫—Ç–Ω–æ.",
                    metaTags: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —ñ —è–∫—ñ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (title, description). –í–æ–Ω–∏ –≤–∞–∂–ª–∏–≤—ñ –¥–ª—è –ø–æ—à—É–∫–æ–≤–∏–∫—ñ–≤, —Ç–∞–∫–∏—Ö —è–∫ Google.",
                    iotCompatibility: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î —Å–∞–π—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ IoT-–ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏ —á–µ—Ä–µ–∑ API –∞–±–æ WebSocket. –¶–µ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è —Å—É—á–∞—Å–Ω–∏—Ö –≤–µ–±-–¥–æ–¥–∞—Ç–∫—ñ–≤."
                },
                messages: {
                    accessible: "–î–æ—Å—Ç—É–ø–Ω–∏–π",
                    notAccessible: "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
                    httpsUsed: "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î HTTPS",
                    httpUsed: "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î HTTP",
                    loadTime: (time) => `${time}—Å ${time < 2 ? "(—à–≤–∏–¥–∫–æ)" : "(–ø–æ–≤—ñ–ª—å–Ω–æ)"}`,
                    loadTimeFailed: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–º—ñ—Ä—è—Ç–∏",
                    urlValid: "–ö–æ—Ä–µ–∫—Ç–Ω–∏–π",
                    urlInvalid: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π",
                    urlLength: (len) => `${len} —Å–∏–º–≤. ${len <= 200 ? "(–û–ö)" : "(–¥–æ–≤–≥–∏–π)"}`,
                    noRedirects: "–ù–µ–º–∞—î",
                    hasRedirects: (status) => `–Ñ (${status})`,
                    redirectsFailed: "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏",
                    protocolPresent: "–Ñ",
                    protocolMissing: "–ù–µ–º–∞—î",
                    tldValid: "–ö–æ—Ä–µ–∫—Ç–Ω–∏–π",
                    tldInvalid: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π",
                    subdomainsPresent: "–Ñ",
                    subdomainsMissing: "–ù–µ–º–∞—î",
                    cyrillicPresent: "–Ñ",
                    cyrillicMissing: "–ù–µ–º–∞—î",
                    paramsPresent: "–Ñ",
                    paramsMissing: "–ù–µ–º–∞—î",
                    slashes: (count) => `–°–ª–µ—à—ñ–≤: ${count} ${count <= 5 ? "(–û–ö)" : "(–∑–∞–±–∞–≥–∞—Ç–æ)"}`,
                    uppercasePresent: "–Ñ",
                    uppercaseMissing: "–ù–µ–º–∞—î",
                    keywordsPresent: "–Ñ",
                    keywordsMissing: "–ù–µ–º–∞—î",
                    ipPresent: "–Ñ",
                    ipMissing: "–ù–µ–º–∞—î",
                    portPresent: "–Ñ",
                    portMissing: "–ù–µ–º–∞—î",
                    encodingPresent: "–Ñ",
                    encodingMissing: "–ù–µ–º–∞—î",
                    hyphens: (count) => `–î–µ—Ñ—ñ—Å—ñ–≤: ${count} ${count <= 3 ? "(–û–ö)" : "(–∑–∞–±–∞–≥–∞—Ç–æ)"}`,
                    anchorPresent: "–Ñ",
                    anchorMissing: "–ù–µ–º–∞—î",
                    suspiciousPresent: "–Ñ",
                    suspiciousMissing: "–ù–µ–º–∞—î",
                    w3cCompliant: "–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î",
                    w3cNonCompliant: "–ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î",
                    httpStatus: (code) => `–ö–æ–¥: ${code} ${code === 200 ? "(OK)" : "(–ø–æ–º–∏–ª–∫–∞)"}`,
                    httpStatusFailed: "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏",
                    metaTagsPresent: "–ü—Ä–∏—Å—É—Ç–Ω—ñ",
                    metaTagsMissing: "–í—ñ–¥—Å—É—Ç–Ω—ñ",
                    iotSupported: "–ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è",
                    iotNotSupported: "–ù–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è"
                },
                success: "‚úÖ –£—Å–ø—ñ—à–Ω–æ",
                error: "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∏"
            }
        };

        let currentLang = 'ru';

        function changeLanguage() {
            currentLang = document.getElementById('languageSelector').value;
            document.getElementById('title').textContent = translations[currentLang].title;
            document.getElementById('urlInput').placeholder = translations[currentLang].placeholder;
            document.getElementById('checkButton').textContent = translations[currentLang].checkButton;
            document.getElementById('result').innerHTML = '';
        }

        async function checkSite() {
            const url = document.getElementById("urlInput").value.trim();
            const resultDiv = document.getElementById("result");
            const progressBar = document.getElementById("progressBar");
            const progressFill = document.getElementById("progressFill");

            if (!url) {
                resultDiv.innerHTML = translations[currentLang].noUrl;
                return;
            }

            let parsedUrl;
            try {
                parsedUrl = new URL(url);
            } catch {
                resultDiv.innerHTML = translations[currentLang].invalidUrl;
                return;
            }

            progressBar.style.display = 'block';
            resultDiv.innerHTML = translations[currentLang].checking;

            const totalTests = 24; // –ë—ã–ª–æ 21, –¥–æ–±–∞–≤–ª–µ–Ω–æ 3 –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–∞
            let completedTests = 0;
            let results = [];

            function updateProgress() {
                completedTests++;
                const progressPercent = (completedTests / totalTests) * 100;
                progressFill.style.width = `${progressPercent}%`;
                progressFill.textContent = `${Math.round(progressPercent)}%`;
            }

            function addResult(testName, message, status, explanationKey) {
                results.push({
                    technical: `${results.length + 1}. ${testName}: ${message}`,
                    userFriendly: status === 'OK' ? translations[currentLang].success : translations[currentLang].error,
                    explanation: translations[currentLang].explanations[explanationKey]
                });
                resultDiv.innerHTML = results.map(result => `
                    <p>
                        <span style="color: #ffeb3b; font-weight: bold;">${result.technical}</span><br>
                        <span style="color: #4caf50; font-style: italic;">${result.userFriendly}</span><br>
                        <span class="explanation">${result.explanation}</span>
                    </p>
                `).join('');
                updateProgress();
            }

            // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
            try {
                const response = await fetch(url, { mode: 'no-cors' });
                addResult(translations[currentLang].tests.accessibility, translations[currentLang].messages.accessible, 'OK', 'accessibility');
            } catch (error) {
                addResult(translations[currentLang].tests.accessibility, translations[currentLang].messages.notAccessible, '–û—à–∏–±–∫–∞', 'accessibility');
            }

            // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS
            const protocol = url.startsWith('https://') ? 'HTTPS' : 'HTTP';
            addResult(translations[currentLang].tests.https, protocol === 'HTTPS' ? translations[currentLang].messages.httpsUsed : translations[currentLang].messages.httpUsed, protocol === 'HTTPS' ? 'OK' : '–û—à–∏–±–∫–∞', 'https');

            // –¢–µ—Å—Ç 3: –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
            try {
                const startTime = performance.now();
                await fetch(url, { mode: 'no-cors' });
                const loadTime = (performance.now() - startTime) / 1000;
                addResult(translations[currentLang].tests.loadTime, translations[currentLang].messages.loadTime(loadTime.toFixed(2)), loadTime < 2 ? 'OK' : '–û—à–∏–±–∫–∞', 'loadTime');
            } catch (error) {
                addResult(translations[currentLang].tests.loadTime, translations[currentLang].messages.loadTimeFailed, '–û—à–∏–±–∫–∞', 'loadTime');
            }

            // –¢–µ—Å—Ç 4: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL
            const urlPattern = /^(https?:\/\/)?([\w\d-]+\.)+[\w\d]{2,}(\/.*)?$/;
            addResult(translations[currentLang].tests.urlFormat, urlPattern.test(url) ? translations[currentLang].messages.urlValid : translations[currentLang].messages.urlInvalid, urlPattern.test(url) ? 'OK' : '–û—à–∏–±–∫–∞', 'urlFormat');

            // –¢–µ—Å—Ç 5: –î–ª–∏–Ω–∞ URL
            const urlLength = url.length;
            addResult(translations[currentLang].tests.urlLength, translations[currentLang].messages.urlLength(urlLength), urlLength <= 200 ? 'OK' : '–û—à–∏–±–∫–∞', 'urlLength');

            // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
            try {
                const response = await fetch(url, { redirect: 'manual', mode: 'no-cors' });
                if (response.status >= 300 && response.status < 400) {
                    addResult(translations[currentLang].tests.redirects, translations[currentLang].messages.hasRedirects(response.status), '–û—à–∏–±–∫–∞', 'redirects');
                } else {
                    addResult(translations[currentLang].tests.redirects, translations[currentLang].messages.noRedirects, 'OK', 'redirects');
                }
            } catch (error) {
                addResult(translations[currentLang].tests.redirects, translations[currentLang].messages.redirectsFailed, '–û—à–∏–±–∫–∞', 'redirects');
            }

            // –¢–µ—Å—Ç 7: –ù–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤ URL
            const hasProtocol = url.startsWith('http://') || url.startsWith('https://');
            addResult(translations[currentLang].tests.protocol, hasProtocol ? translations[currentLang].messages.protocolPresent : translations[currentLang].messages.protocolMissing, hasProtocol ? 'OK' : '–û—à–∏–±–∫–∞', 'protocol');

            // –¢–µ—Å—Ç 8: –ù–∞–ª–∏—á–∏–µ –¥–æ–º–µ–Ω–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
            const tldPattern = /\.[a-z]{2,}$/i;
            const hasTld = tldPattern.test(parsedUrl.hostname);
            addResult(translations[currentLang].tests.topLevelDomain, hasTld ? translations[currentLang].messages.tldValid : translations[currentLang].messages.tldInvalid, hasTld ? 'OK' : '–û—à–∏–±–∫–∞', 'topLevelDomain');

            // –¢–µ—Å—Ç 9: –ù–∞–ª–∏—á–∏–µ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤
            const subdomains = parsedUrl.hostname.split('.').length > 2;
            addResult(translations[currentLang].tests.subdomains, subdomains ? translations[currentLang].messages.subdomainsPresent : translations[currentLang].messages.subdomainsMissing, subdomains ? 'OK' : '–û—à–∏–±–∫–∞', 'subdomains');

            // –¢–µ—Å—Ç 10: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ URL
            const hasCyrillic = /[–∞-—è–ê-–Ø]/.test(url);
            addResult(translations[currentLang].tests.cyrillic, hasCyrillic ? translations[currentLang].messages.cyrillicPresent : translations[currentLang].messages.cyrillicMissing, hasCyrillic ? '–û—à–∏–±–∫–∞' : 'OK', 'cyrillic');

            // –¢–µ—Å—Ç 11: –ù–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ URL
            const hasParams = parsedUrl.search !== '';
            addResult(translations[currentLang].tests.parameters, hasParams ? translations[currentLang].messages.paramsPresent : translations[currentLang].messages.paramsMissing, hasParams ? 'OK' : '–û—à–∏–±–∫–∞', 'parameters');

            // –¢–µ—Å—Ç 12: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–µ—à–µ–π –≤ –ø—É—Ç–∏
            const slashesCount = (parsedUrl.pathname.match(/\//g) || []).length;
            addResult(translations[currentLang].tests.slashes, translations[currentLang].messages.slashes(slashesCount), slashesCount <= 5 ? 'OK' : '–û—à–∏–±–∫–∞', 'slashes');

            // –¢–µ—Å—Ç 13: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –≤ URL
            const hasUppercase = /[A-Z]/.test(url);
            addResult(translations[currentLang].tests.uppercase, hasUppercase ? translations[currentLang].messages.uppercasePresent : translations[currentLang].messages.uppercaseMissing, hasUppercase ? '–û—à–∏–±–∫–∞' : 'OK', 'uppercase');

            // –¢–µ—Å—Ç 14: –ù–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ URL
            const keywords = ['blog', 'shop', 'news', 'about', 'contact'];
            const hasKeywords = keywords.some(keyword => url.toLowerCase().includes(keyword));
            addResult(translations[currentLang].tests.keywords, hasKeywords ? translations[currentLang].messages.keywordsPresent : translations[currentLang].messages.keywordsMissing, hasKeywords ? 'OK' : '–û—à–∏–±–∫–∞', 'keywords');

            // –¢–µ—Å—Ç 15: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ IPv4/IPv6 –≤ –¥–æ–º–µ–Ω–µ
            const ipPattern = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$|^(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$/;
            const isIp = ipPattern.test(parsedUrl.hostname);
            addResult(translations[currentLang].tests.ipAddress, isIp ? translations[currentLang].messages.ipPresent : translations[currentLang].messages.ipMissing, isIp ? '–û—à–∏–±–∫–∞' : 'OK', 'ipAddress');

            // –¢–µ—Å—Ç 16: –ù–∞–ª–∏—á–∏–µ –ø–æ—Ä—Ç–∞ –≤ URL
            const hasPort = parsedUrl.port !== '';
            addResult(translations[currentLang].tests.port, hasPort ? translations[currentLang].messages.portPresent : translations[currentLang].messages.portMissing, hasPort ? '–û—à–∏–±–∫–∞' : 'OK', 'port');

            // –¢–µ—Å—Ç 17: –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –≤ URL
            const hasEncoding = /%[0-9a-fA-F]{2}/.test(url);
            addResult(translations[currentLang].tests.encoding, hasEncoding ? translations[currentLang].messages.encodingPresent : translations[currentLang].messages.encodingMissing, hasEncoding ? 'OK' : '–û—à–∏–±–∫–∞', 'encoding');

            // –¢–µ—Å—Ç 18: –ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ—Ñ–∏—Å–æ–≤
            const hyphenCount = (url.match(/-/g) || []).length;
            addResult(translations[currentLang].tests.hyphens, translations[currentLang].messages.hyphens(hyphenCount), hyphenCount <= 3 ? 'OK' : '–û—à–∏–±–∫–∞', 'hyphens');

            // –¢–µ—Å—Ç 19: –ù–∞–ª–∏—á–∏–µ —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
            const hasAnchor = parsedUrl.hash !== '';
            addResult(translations[currentLang].tests.anchor, hasAnchor ? translations[currentLang].messages.anchorPresent : translations[currentLang].messages.anchorMissing, hasAnchor ? 'OK' : '–û—à–∏–±–∫–∞', 'anchor');

            // –¢–µ—Å—Ç 20: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            const suspiciousPattern = /[<>;(){}'"]/;
            const hasSuspicious = suspiciousPattern.test(url);
            addResult(translations[currentLang].tests.suspicious, hasSuspicious ? translations[currentLang].messages.suspiciousPresent : translations[currentLang].messages.suspiciousMissing, hasSuspicious ? '–û—à–∏–±–∫–∞' : 'OK', 'suspicious');

            // –¢–µ—Å—Ç 21: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º W3C –¥–ª—è URL
            const w3cPattern = /^[a-zA-Z0-9\-._~:/?#[\]@!$&'()*+,;=]+$/;
            const isW3cCompliant = w3cPattern.test(url);
            addResult(translations[currentLang].tests.w3c, isW3cCompliant ? translations[currentLang].messages.w3cCompliant : translations[currentLang].messages.w3cNonCompliant, isW3cCompliant ? 'OK' : '–û—à–∏–±–∫–∞', 'w3c');

            // –¢–µ—Å—Ç 22: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞
            try {
                const response = await fetch(url, { method: 'HEAD' });
                addResult(translations[currentLang].tests.httpStatus, translations[currentLang].messages.httpStatus(response.status), response.status === 200 ? 'OK' : '–û—à–∏–±–∫–∞', 'httpStatus');
            } catch (error) {
                addResult(translations[currentLang].tests.httpStatus, translations[currentLang].messages.httpStatusFailed, '–û—à–∏–±–∫–∞', 'httpStatus');
            }

            // –¢–µ—Å—Ç 23: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤
            try {
                const response = await fetch(url);
                const text = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(text, 'text/html');
                const title = doc.querySelector('title')?.textContent;
                const description = doc.querySelector('meta[name="description"]')?.content;
                const hasMetaTags = title && description && title.length <= 60 && description.length <= 160;
                addResult(translations[currentLang].tests.metaTags, hasMetaTags ? translations[currentLang].messages.metaTagsPresent : translations[currentLang].messages.metaTagsMissing, hasMetaTags ? 'OK' : '–û—à–∏–±–∫–∞', 'metaTags');
            } catch (error) {
                addResult(translations[currentLang].tests.metaTags, translations[currentLang].messages.metaTagsMissing, '–û—à–∏–±–∫–∞', 'metaTags');
            }

            // –¢–µ—Å—Ç 24: –ü—Ä–æ–≤–µ—Ä–∫–∞ IoT-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            try {
                const response = await fetch(url);
                const headers = response.headers;
                const contentType = headers.get('content-type');
                const hasApi = contentType?.includes('json') || url.includes('/api/') || (await fetch(url + '/api', { method: 'OPTIONS' }).then(res => res.ok).catch(() => false));
                addResult(translations[currentLang].tests.iotCompatibility, hasApi ? translations[currentLang].messages.iotSupported : translations[currentLang].messages.iotNotSupported, hasApi ? 'OK' : '–û—à–∏–±–∫–∞', 'iotCompatibility');
            } catch (error) {
                addResult(translations[currentLang].tests.iotCompatibility, translations[currentLang].messages.iotNotSupported, '–û—à–∏–±–∫–∞', 'iotCompatibility');
            }
        }
    </script>
</body>
</html>
